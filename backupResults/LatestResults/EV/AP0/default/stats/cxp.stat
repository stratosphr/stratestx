Results for CXP (in 00:00:04.230):

NB_EV: 11

AP: AP0

NB_AP: 3

NB_MAY: -1

NB_MUST_MINUS: -1

NB_MUST_PLUS: -1

NB_MUST_SHARP: -1

NB_AS: 4

NB_AS_RCHD: 3

TAU_AS: 75.00

NB_AT: 27

NB_AT_RCHD: 12

TAU_AT: 44.44

NB_EXPECTED_AS: 4

NB_EXPECTED_AS_RCHD: 3

TAU_EXPECTED_AS: 75.00

NB_EXPECTED_AT: 1

NB_EXPECTED_AT_RCHD: 0

TAU_EXPECTED_AT: 0.00

NB_CS: 56

NB_CS_RCHD: 13

NB_CT: 39

NB_CT_RCHD: 12

RHO_CS: 23.21

RHO_CT: 30.77

NB_TESTS: 5

NB_STEPS: 16

TESTS: 
c0q1 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=4, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ eAppel_Montee_Cabine ]-> c4q1 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=4, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
c4q1 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=4, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ gAppel_Montee_Etage ]-> c9q1 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=1, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=4, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
c9q1 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=1, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=4, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ hAppel_Descente_Etage ]-> c11q1 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=1, BM(0)=0, BM(1)=1, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=4, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
############################################
c0q1 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=4, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ aOuverture_Portes_Etage ]-> c1q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
c1q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ bOuverture_Portes_Cabine ]-> c13q4 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=3, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
c13q4 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=3, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ eAppel_Montee_Cabine ]-> c38q4 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=3, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
c38q4 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=3, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ gAppel_Montee_Etage ]-> c43q4 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=1, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=3, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
c43q4 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=1, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=3, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ hAppel_Descente_Etage ]-> c45q4 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=1, BM(0)=1, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=3, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
############################################
c0q1 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=4, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ aOuverture_Portes_Etage ]-> c1q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
c1q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ gAppel_Montee_Etage ]-> c25q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=1, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
c25q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=1, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ hAppel_Descente_Etage ]-> c28q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=1, BD(2)=0, BD(3)=0, BM(0)=1, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
############################################
c0q1 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=4, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ aOuverture_Portes_Etage ]-> c1q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
c1q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ bOuverture_Portes_Cabine ]-> c13q4 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=3, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
c13q4 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=3, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ cFermeture_Portes_Cabine ]-> c36q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=5, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
############################################
c0q1 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=4, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ aOuverture_Portes_Etage ]-> c1q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
c1q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0 -[ eAppel_Montee_Cabine ]-> c20q0 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=4, PE(0)=3, PE(1)=4, PE(2)=4, PE(3)=4, Pos=0
############################################


SET_EXPECTED_AS: 
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])


SET_RCHD_AS: 
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])


SET_RCHD_EXPECTED_AS: 
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])


SET_EXPECTED_AT: 
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ iMontee_Cabine ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])


SET_RCHD_AT: 
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ bOuverture_Portes_Cabine ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ eAppel_Montee_Cabine ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ gAppel_Montee_Etage ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ hAppel_Descente_Etage ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ aOuverture_Portes_Etage ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ eAppel_Montee_Cabine ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ gAppel_Montee_Etage ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ hAppel_Descente_Etage ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3]) -[ cFermeture_Portes_Cabine ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3]) -[ eAppel_Montee_Cabine ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3]) -[ gAppel_Montee_Etage ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3]) -[ hAppel_Descente_Etage ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])


SET_RCHD_EXPECTED_AT: 



SET_UNRCHD_AS: 
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])


SET_UNRCHD_EXPECTED_AS: 
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])


SET_UNRCHD_AT: 
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ dFermeture_Portes_Etage ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ dFermeture_Portes_Etage ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ eAppel_Montee_Cabine ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ fAppel_Descente_Cabine ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ gAppel_Montee_Etage ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ jChangement_Direction ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ jChangement_Direction ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ kDescente_Cabine ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ fAppel_Descente_Cabine ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ eAppel_Montee_Cabine ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ fAppel_Descente_Cabine ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ gAppel_Montee_Etage ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ hAppel_Descente_Etage ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ iMontee_Cabine ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3]) -[ fAppel_Descente_Cabine ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])


SET_UNRCHD_EXPECTED_AT: 
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ iMontee_Cabine ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])


TIME_ATS: 00:00:04.230

TIME_TESTS: 00:00:00.000