digraph g {

	rankdir="LR"

	__invisible__[shape="point", color="forestgreen"]
	q256[label=<<b>q<sub>256</sub> = ¬(p0 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 50))), ¬(p1 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 100))), ¬(p10 = and(Status=on[1], Balance &gt; 0, AskChange=1)), (p2 = and(Status=off[0], CofLeft &gt; 0, MaxPot &gt;= Pot)), ¬(p3 = or(and(Status=on[1], AskChange=0, AskCof=0, Balance=0), Status=error[2])), ¬(p4 = Status=on[1]), ¬(p5 = and(Status=off[0], Pot &gt;= (MaxPot - 50))), ¬(p6 = and(Status=on[1], Balance &gt;= 50, AskCof=0, AskChange=0)), ¬(p7 = and(Status=on[1], Balance &gt; 0, AskCof=0, AskChange=0)), ¬(p8 = ∃(x).(and(and(x ∈ [1..MaxCof]), and(MaxCof &gt;= (CofLeft + x), Status=off[0], MaxCof &gt; CofLeft)))), ¬(p9 = and(Status=on[1], Balance &gt;= 50, AskCof=1, CofLeft &gt; 0))</b>>, shape="box", style="rounded, filled", fillcolor="limegreen", color="forestgreen", penwidth=3] // Initial
	q1728[label=<<b>q<sub>1728</sub> = (p0 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 50))), (p1 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 100))), ¬(p10 = and(Status=on[1], Balance &gt; 0, AskChange=1)), ¬(p2 = and(Status=off[0], CofLeft &gt; 0, MaxPot &gt;= Pot)), (p3 = or(and(Status=on[1], AskChange=0, AskCof=0, Balance=0), Status=error[2])), (p4 = Status=on[1]), ¬(p5 = and(Status=off[0], Pot &gt;= (MaxPot - 50))), ¬(p6 = and(Status=on[1], Balance &gt;= 50, AskCof=0, AskChange=0)), ¬(p7 = and(Status=on[1], Balance &gt; 0, AskCof=0, AskChange=0)), ¬(p8 = ∃(x).(and(and(x ∈ [1..MaxCof]), and(MaxCof &gt;= (CofLeft + x), Status=off[0], MaxCof &gt; CofLeft)))), ¬(p9 = and(Status=on[1], Balance &gt;= 50, AskCof=1, CofLeft &gt; 0))</b>>, shape="box", style="rounded, filled", fillcolor="limegreen", color="forestgreen"]
	q128[label=<<b>q<sub>128</sub> = ¬(p0 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 50))), ¬(p1 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 100))), ¬(p10 = and(Status=on[1], Balance &gt; 0, AskChange=1)), ¬(p2 = and(Status=off[0], CofLeft &gt; 0, MaxPot &gt;= Pot)), (p3 = or(and(Status=on[1], AskChange=0, AskCof=0, Balance=0), Status=error[2])), ¬(p4 = Status=on[1]), ¬(p5 = and(Status=off[0], Pot &gt;= (MaxPot - 50))), ¬(p6 = and(Status=on[1], Balance &gt;= 50, AskCof=0, AskChange=0)), ¬(p7 = and(Status=on[1], Balance &gt; 0, AskCof=0, AskChange=0)), ¬(p8 = ∃(x).(and(and(x ∈ [1..MaxCof]), and(MaxCof &gt;= (CofLeft + x), Status=off[0], MaxCof &gt; CofLeft)))), ¬(p9 = and(Status=on[1], Balance &gt;= 50, AskCof=1, CofLeft &gt; 0))</b>>, shape="box", style="rounded, filled", fillcolor="limegreen", color="forestgreen"]
	q4[label=<<b>q<sub>4</sub> = ¬(p0 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 50))), ¬(p1 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 100))), ¬(p10 = and(Status=on[1], Balance &gt; 0, AskChange=1)), ¬(p2 = and(Status=off[0], CofLeft &gt; 0, MaxPot &gt;= Pot)), ¬(p3 = or(and(Status=on[1], AskChange=0, AskCof=0, Balance=0), Status=error[2])), ¬(p4 = Status=on[1]), ¬(p5 = and(Status=off[0], Pot &gt;= (MaxPot - 50))), ¬(p6 = and(Status=on[1], Balance &gt;= 50, AskCof=0, AskChange=0)), ¬(p7 = and(Status=on[1], Balance &gt; 0, AskCof=0, AskChange=0)), (p8 = ∃(x).(and(and(x ∈ [1..MaxCof]), and(MaxCof &gt;= (CofLeft + x), Status=off[0], MaxCof &gt; CofLeft)))), ¬(p9 = and(Status=on[1], Balance &gt;= 50, AskCof=1, CofLeft &gt; 0))</b>>, shape="box", style="rounded, filled", fillcolor="limegreen", color="forestgreen"]
	q260[label=<<b>q<sub>260</sub> = ¬(p0 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 50))), ¬(p1 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 100))), ¬(p10 = and(Status=on[1], Balance &gt; 0, AskChange=1)), (p2 = and(Status=off[0], CofLeft &gt; 0, MaxPot &gt;= Pot)), ¬(p3 = or(and(Status=on[1], AskChange=0, AskCof=0, Balance=0), Status=error[2])), ¬(p4 = Status=on[1]), ¬(p5 = and(Status=off[0], Pot &gt;= (MaxPot - 50))), ¬(p6 = and(Status=on[1], Balance &gt;= 50, AskCof=0, AskChange=0)), ¬(p7 = and(Status=on[1], Balance &gt; 0, AskCof=0, AskChange=0)), (p8 = ∃(x).(and(and(x ∈ [1..MaxCof]), and(MaxCof &gt;= (CofLeft + x), Status=off[0], MaxCof &gt; CofLeft)))), ¬(p9 = and(Status=on[1], Balance &gt;= 50, AskCof=1, CofLeft &gt; 0))</b>>, shape="box", style="rounded, filled", fillcolor="limegreen", color="forestgreen"]
	q36[label=<<b>q<sub>36</sub> = ¬(p0 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 50))), ¬(p1 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 100))), ¬(p10 = and(Status=on[1], Balance &gt; 0, AskChange=1)), ¬(p2 = and(Status=off[0], CofLeft &gt; 0, MaxPot &gt;= Pot)), ¬(p3 = or(and(Status=on[1], AskChange=0, AskCof=0, Balance=0), Status=error[2])), ¬(p4 = Status=on[1]), (p5 = and(Status=off[0], Pot &gt;= (MaxPot - 50))), ¬(p6 = and(Status=on[1], Balance &gt;= 50, AskCof=0, AskChange=0)), ¬(p7 = and(Status=on[1], Balance &gt; 0, AskCof=0, AskChange=0)), (p8 = ∃(x).(and(and(x ∈ [1..MaxCof]), and(MaxCof &gt;= (CofLeft + x), Status=off[0], MaxCof &gt; CofLeft)))), ¬(p9 = and(Status=on[1], Balance &gt;= 50, AskCof=1, CofLeft &gt; 0))</b>>, shape="box", style="rounded, filled", fillcolor="limegreen", color="forestgreen"]
	q288[label=<<b>q<sub>288</sub> = ¬(p0 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 50))), ¬(p1 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 100))), ¬(p10 = and(Status=on[1], Balance &gt; 0, AskChange=1)), (p2 = and(Status=off[0], CofLeft &gt; 0, MaxPot &gt;= Pot)), ¬(p3 = or(and(Status=on[1], AskChange=0, AskCof=0, Balance=0), Status=error[2])), ¬(p4 = Status=on[1]), (p5 = and(Status=off[0], Pot &gt;= (MaxPot - 50))), ¬(p6 = and(Status=on[1], Balance &gt;= 50, AskCof=0, AskChange=0)), ¬(p7 = and(Status=on[1], Balance &gt; 0, AskCof=0, AskChange=0)), ¬(p8 = ∃(x).(and(and(x ∈ [1..MaxCof]), and(MaxCof &gt;= (CofLeft + x), Status=off[0], MaxCof &gt; CofLeft)))), ¬(p9 = and(Status=on[1], Balance &gt;= 50, AskCof=1, CofLeft &gt; 0))</b>>, shape="box", style="rounded, filled", fillcolor="limegreen", color="forestgreen"]
	q292[label=<<b>q<sub>292</sub> = ¬(p0 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 50))), ¬(p1 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 100))), ¬(p10 = and(Status=on[1], Balance &gt; 0, AskChange=1)), (p2 = and(Status=off[0], CofLeft &gt; 0, MaxPot &gt;= Pot)), ¬(p3 = or(and(Status=on[1], AskChange=0, AskCof=0, Balance=0), Status=error[2])), ¬(p4 = Status=on[1]), (p5 = and(Status=off[0], Pot &gt;= (MaxPot - 50))), ¬(p6 = and(Status=on[1], Balance &gt;= 50, AskCof=0, AskChange=0)), ¬(p7 = and(Status=on[1], Balance &gt; 0, AskCof=0, AskChange=0)), (p8 = ∃(x).(and(and(x ∈ [1..MaxCof]), and(MaxCof &gt;= (CofLeft + x), Status=off[0], MaxCof &gt; CofLeft)))), ¬(p9 = and(Status=on[1], Balance &gt;= 50, AskCof=1, CofLeft &gt; 0))</b>>, shape="box", style="rounded, filled", fillcolor="limegreen", color="forestgreen"]
	q1624[label=<<b>q<sub>1624</sub> = (p0 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 50))), (p1 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 100))), ¬(p10 = and(Status=on[1], Balance &gt; 0, AskChange=1)), ¬(p2 = and(Status=off[0], CofLeft &gt; 0, MaxPot &gt;= Pot)), ¬(p3 = or(and(Status=on[1], AskChange=0, AskCof=0, Balance=0), Status=error[2])), (p4 = Status=on[1]), ¬(p5 = and(Status=off[0], Pot &gt;= (MaxPot - 50))), (p6 = and(Status=on[1], Balance &gt;= 50, AskCof=0, AskChange=0)), (p7 = and(Status=on[1], Balance &gt; 0, AskCof=0, AskChange=0)), ¬(p8 = ∃(x).(and(and(x ∈ [1..MaxCof]), and(MaxCof &gt;= (CofLeft + x), Status=off[0], MaxCof &gt; CofLeft)))), ¬(p9 = and(Status=on[1], Balance &gt;= 50, AskCof=1, CofLeft &gt; 0))</b>>, shape="box", style="rounded, filled", fillcolor="limegreen", color="forestgreen"]
	q65[label=<<b>q<sub>65</sub> = ¬(p0 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 50))), ¬(p1 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 100))), (p10 = and(Status=on[1], Balance &gt; 0, AskChange=1)), ¬(p2 = and(Status=off[0], CofLeft &gt; 0, MaxPot &gt;= Pot)), ¬(p3 = or(and(Status=on[1], AskChange=0, AskCof=0, Balance=0), Status=error[2])), (p4 = Status=on[1]), ¬(p5 = and(Status=off[0], Pot &gt;= (MaxPot - 50))), ¬(p6 = and(Status=on[1], Balance &gt;= 50, AskCof=0, AskChange=0)), ¬(p7 = and(Status=on[1], Balance &gt; 0, AskCof=0, AskChange=0)), ¬(p8 = ∃(x).(and(and(x ∈ [1..MaxCof]), and(MaxCof &gt;= (CofLeft + x), Status=off[0], MaxCof &gt; CofLeft)))), ¬(p9 = and(Status=on[1], Balance &gt;= 50, AskCof=1, CofLeft &gt; 0))</b>>, shape="box", style="rounded, filled", fillcolor="limegreen", color="forestgreen"]
	q66[label=<<b>q<sub>66</sub> = ¬(p0 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 50))), ¬(p1 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 100))), ¬(p10 = and(Status=on[1], Balance &gt; 0, AskChange=1)), ¬(p2 = and(Status=off[0], CofLeft &gt; 0, MaxPot &gt;= Pot)), ¬(p3 = or(and(Status=on[1], AskChange=0, AskCof=0, Balance=0), Status=error[2])), (p4 = Status=on[1]), ¬(p5 = and(Status=off[0], Pot &gt;= (MaxPot - 50))), ¬(p6 = and(Status=on[1], Balance &gt;= 50, AskCof=0, AskChange=0)), ¬(p7 = and(Status=on[1], Balance &gt; 0, AskCof=0, AskChange=0)), ¬(p8 = ∃(x).(and(and(x ∈ [1..MaxCof]), and(MaxCof &gt;= (CofLeft + x), Status=off[0], MaxCof &gt; CofLeft)))), (p9 = and(Status=on[1], Balance &gt;= 50, AskCof=1, CofLeft &gt; 0))</b>>, shape="box", style="rounded, filled", fillcolor="limegreen", color="forestgreen"]
	q1112[label=<<b>q<sub>1112</sub> = (p0 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 50))), ¬(p1 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 100))), ¬(p10 = and(Status=on[1], Balance &gt; 0, AskChange=1)), ¬(p2 = and(Status=off[0], CofLeft &gt; 0, MaxPot &gt;= Pot)), ¬(p3 = or(and(Status=on[1], AskChange=0, AskCof=0, Balance=0), Status=error[2])), (p4 = Status=on[1]), ¬(p5 = and(Status=off[0], Pot &gt;= (MaxPot - 50))), (p6 = and(Status=on[1], Balance &gt;= 50, AskCof=0, AskChange=0)), (p7 = and(Status=on[1], Balance &gt; 0, AskCof=0, AskChange=0)), ¬(p8 = ∃(x).(and(and(x ∈ [1..MaxCof]), and(MaxCof &gt;= (CofLeft + x), Status=off[0], MaxCof &gt; CofLeft)))), ¬(p9 = and(Status=on[1], Balance &gt;= 50, AskCof=1, CofLeft &gt; 0))</b>>, shape="box", style="rounded, filled", fillcolor="limegreen", color="forestgreen"]
	q88[label=<<b>q<sub>88</sub> = ¬(p0 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 50))), ¬(p1 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 100))), ¬(p10 = and(Status=on[1], Balance &gt; 0, AskChange=1)), ¬(p2 = and(Status=off[0], CofLeft &gt; 0, MaxPot &gt;= Pot)), ¬(p3 = or(and(Status=on[1], AskChange=0, AskCof=0, Balance=0), Status=error[2])), (p4 = Status=on[1]), ¬(p5 = and(Status=off[0], Pot &gt;= (MaxPot - 50))), (p6 = and(Status=on[1], Balance &gt;= 50, AskCof=0, AskChange=0)), (p7 = and(Status=on[1], Balance &gt; 0, AskCof=0, AskChange=0)), ¬(p8 = ∃(x).(and(and(x ∈ [1..MaxCof]), and(MaxCof &gt;= (CofLeft + x), Status=off[0], MaxCof &gt; CofLeft)))), ¬(p9 = and(Status=on[1], Balance &gt;= 50, AskCof=1, CofLeft &gt; 0))</b>>, shape="box", style="rounded, filled", fillcolor="limegreen", color="forestgreen"]
	q64[label=<<b>q<sub>64</sub> = ¬(p0 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 50))), ¬(p1 = and(Status=on[1], AskChange=0, AskCof=0, MaxBal &gt;= (Balance + 100))), ¬(p10 = and(Status=on[1], Balance &gt; 0, AskChange=1)), ¬(p2 = and(Status=off[0], CofLeft &gt; 0, MaxPot &gt;= Pot)), ¬(p3 = or(and(Status=on[1], AskChange=0, AskCof=0, Balance=0), Status=error[2])), (p4 = Status=on[1]), ¬(p5 = and(Status=off[0], Pot &gt;= (MaxPot - 50))), ¬(p6 = and(Status=on[1], Balance &gt;= 50, AskCof=0, AskChange=0)), ¬(p7 = and(Status=on[1], Balance &gt; 0, AskCof=0, AskChange=0)), ¬(p8 = ∃(x).(and(and(x ∈ [1..MaxCof]), and(MaxCof &gt;= (CofLeft + x), Status=off[0], MaxCof &gt; CofLeft)))), ¬(p9 = and(Status=on[1], Balance &gt;= 50, AskCof=1, CofLeft &gt; 0))</b>>, shape="box", style="rounded, filled", fillcolor="limegreen", color="forestgreen"]

	__invisible__ -> q256[penwidth=3, color="forestgreen"]
	q256 -> q1728[label=<powerUp>, color="forestgreen"]
	q1728 -> q128[label=<autoOut>, color="forestgreen"]
	q128 -> q256[label=<powerDown>, color="forestgreen"]
	q128 -> q4[label=<powerDown>, color="forestgreen"]
	q4 -> q256[label=<addCof>, color="forestgreen"]
	q4 -> q260[label=<addCof>, color="forestgreen"]
	q260 -> q260[label=<addCof>, color="forestgreen"]
	q260 -> q256[label=<addCof>, color="forestgreen"]
	q260 -> q1728[label=<powerUp>, color="forestgreen"]
	q128 -> q36[label=<powerDown>, color="forestgreen"]
	q36 -> q288[label=<addCof>, color="forestgreen"]
	q288 -> q1728[label=<powerUp>, color="forestgreen"]
	q288 -> q256[label=<takePot>, color="forestgreen"]
	q36 -> q292[label=<addCof>, color="forestgreen"]
	q292 -> q292[label=<addCof>, color="forestgreen"]
	q292 -> q288[label=<addCof>, color="forestgreen"]
	q292 -> q1728[label=<powerUp>, color="forestgreen"]
	q292 -> q260[label=<takePot>, color="forestgreen"]
	q36 -> q4[label=<takePot>, color="forestgreen"]
	q128 -> q260[label=<powerDown>, color="forestgreen"]
	q128 -> q288[label=<powerDown>, color="forestgreen"]
	q128 -> q292[label=<powerDown>, color="forestgreen"]
	q1728 -> q1624[label=<insert100>, color="forestgreen"]
	q1624 -> q128[label=<autoOut>, color="forestgreen"]
	q1624 -> q65[label=<changeReq>, color="forestgreen"]
	q65 -> q128[label=<autoOut>, color="forestgreen"]
	q65 -> q1728[label=<backBalance>, color="forestgreen"]
	q1624 -> q66[label=<cofReq>, color="forestgreen"]
	q66 -> q128[label=<autoOut>, color="forestgreen"]
	q66 -> q65[label=<serveCof>, color="forestgreen"]
	q66 -> q128[label=<serveCof>, color="forestgreen"]
	q66 -> q1728[label=<serveCof>, color="forestgreen"]
	q1624 -> q1112[label=<insert100>, color="forestgreen"]
	q1112 -> q128[label=<autoOut>, color="forestgreen"]
	q1112 -> q65[label=<changeReq>, color="forestgreen"]
	q1112 -> q66[label=<cofReq>, color="forestgreen"]
	q1112 -> q88[label=<insert50>, color="forestgreen"]
	q88 -> q128[label=<autoOut>, color="forestgreen"]
	q88 -> q65[label=<changeReq>, color="forestgreen"]
	q88 -> q66[label=<cofReq>, color="forestgreen"]
	q88 -> q64[label=<cofReq>, color="forestgreen"]
	q64 -> q128[label=<autoOut>, color="forestgreen"]
	q1112 -> q64[label=<cofReq>, color="forestgreen"]
	q1624 -> q88[label=<insert100>, color="forestgreen"]
	q1624 -> q1624[label=<insert50>, color="forestgreen"]
	q1624 -> q1112[label=<insert50>, color="forestgreen"]
	q1624 -> q64[label=<cofReq>, color="forestgreen"]
	q1728 -> q1624[label=<insert50>, color="forestgreen"]
	q1728 -> q256[label=<powerDown>, color="forestgreen"]
	q1728 -> q4[label=<powerDown>, color="forestgreen"]
	q1728 -> q36[label=<powerDown>, color="forestgreen"]
	q1728 -> q260[label=<powerDown>, color="forestgreen"]
	q1728 -> q288[label=<powerDown>, color="forestgreen"]
	q1728 -> q292[label=<powerDown>, color="forestgreen"]

}
