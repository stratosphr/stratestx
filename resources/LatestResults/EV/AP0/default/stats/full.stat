Results for FULL (in 02:30:54.989):

NB_EV: 11

AP: AP0

NB_AP: 3

NB_MAY: -1

NB_MUST_MINUS: -1

NB_MUST_PLUS: -1

NB_MUST_SHARP: -1

NB_AS: 4

NB_AS_RCHD: 4

TAU_AS: 100.00

NB_AT: 27

NB_AT_RCHD: 27

TAU_AT: 100.00

NB_EXPECTED_AS: 4

NB_EXPECTED_AS_RCHD: 4

TAU_EXPECTED_AS: 100.00

NB_EXPECTED_AT: 1

NB_EXPECTED_AT_RCHD: 1

TAU_EXPECTED_AT: 100.00

NB_CS: 18416

NB_CS_RCHD: 18416

NB_CT: 101072

NB_CT_RCHD: 101072

RHO_CS: 100.00

RHO_CT: 100.00

SET_EXPECTED_AS: 
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])


SET_RCHD_AS: 
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])


SET_RCHD_EXPECTED_AS: 
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])


SET_EXPECTED_AT: 
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ iMontee_Cabine ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])


SET_RCHD_AT: 
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ bOuverture_Portes_Cabine ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ dFermeture_Portes_Etage ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ dFermeture_Portes_Etage ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ eAppel_Montee_Cabine ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ eAppel_Montee_Cabine ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ fAppel_Descente_Cabine ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ gAppel_Montee_Etage ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ gAppel_Montee_Etage ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ hAppel_Descente_Etage ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ jChangement_Direction ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ jChangement_Direction ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ kDescente_Cabine ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ aOuverture_Portes_Etage ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ eAppel_Montee_Cabine ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ fAppel_Descente_Cabine ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ gAppel_Montee_Etage ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ hAppel_Descente_Etage ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ eAppel_Montee_Cabine ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ fAppel_Descente_Cabine ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ gAppel_Montee_Etage ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ hAppel_Descente_Etage ]-> q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ iMontee_Cabine ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3]) -[ cFermeture_Portes_Cabine ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3]) -[ eAppel_Montee_Cabine ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3]) -[ fAppel_Descente_Cabine ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3]) -[ gAppel_Montee_Etage ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3]) -[ hAppel_Descente_Etage ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), (p0 = PC=ouvertes[3])


SET_RCHD_EXPECTED_AT: 
q2 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3]) -[ iMontee_Cabine ]-> q1 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[5], PE(Pos)=fermees[4], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Etage = and(PE(Pos)=fermees[4], PC=fermees[4])), ¬(p0 = PC=ouvertes[3])


SET_UNRCHD_AS: 



SET_UNRCHD_EXPECTED_AS: 



SET_UNRCHD_AT: 



SET_UNRCHD_EXPECTED_AT: 



TIME_ATS: 02:30:54.989