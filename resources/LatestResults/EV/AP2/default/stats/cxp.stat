Results for CXP (in 00:00:04.716):

NB_EV: 11

AP: AP2

NB_AP: 3

NB_MAY: -1

NB_MUST_MINUS: -1

NB_MUST_PLUS: -1

NB_MUST_SHARP: -1

NB_AS: 5

NB_AS_RCHD: 2

TAU_AS: 40.00

NB_AT: 33

NB_AT_RCHD: 8

TAU_AT: 24.24

NB_EXPECTED_AS: 5

NB_EXPECTED_AS_RCHD: 2

TAU_EXPECTED_AS: 40.00

NB_EXPECTED_AT: 2

NB_EXPECTED_AT_RCHD: 0

TAU_EXPECTED_AT: 0.00

NB_CS: 53

NB_CS_RCHD: 9

NB_CT: 41

NB_CT_RCHD: 8

RHO_CS: 16.98

RHO_CT: 19.51

NB_TESTS: 4

NB_STEPS: 9

TESTS: 
c0q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=1, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0 -[ aOuverture_Portes_Etage ]-> c1q2 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=0, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0
c1q2 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=0, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0 -[ eAppel_Montee_Cabine ]-> c30q2 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=0, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0
c30q2 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=0, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0 -[ gAppel_Montee_Etage ]-> c33q2 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=1, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=0, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0
c33q2 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=1, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=0, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0 -[ hAppel_Descente_Etage ]-> c35q2 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=1, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=1, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=0, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0
############################################
c0q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=1, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0 -[ gAppel_Montee_Etage ]-> c18q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=1, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=1, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0
c18q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=1, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=1, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0 -[ hAppel_Descente_Etage ]-> c21q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=1, BD(2)=0, BD(3)=0, BM(0)=1, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=1, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0
############################################
c0q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=1, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0 -[ aOuverture_Portes_Etage ]-> c1q2 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=0, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0
c1q2 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=0, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0 -[ bOuverture_Portes_Cabine ]-> c29q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=0, PE(0)=0, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0
############################################
c0q0 = BC(0)=0, BC(1)=0, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=1, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0 -[ eAppel_Montee_Cabine ]-> c12q0 = BC(0)=0, BC(1)=1, BC(2)=0, BC(3)=0, BD(0)=0, BD(1)=0, BD(2)=0, BD(3)=0, BM(0)=0, BM(1)=0, BM(2)=0, BM(3)=0, Dir=1, PC=1, PE(0)=1, PE(1)=1, PE(2)=1, PE(3)=1, Pos=0
############################################


SET_EXPECTED_AS: 
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q2 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])
q6 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])


SET_RCHD_AS: 
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q2 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])


SET_RCHD_EXPECTED_AS: 
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q2 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])


SET_EXPECTED_AT: 
q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ iMontee_Cabine ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q6 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0]) -[ bOuverture_Portes_Cabine ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])


SET_RCHD_AT: 
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ aOuverture_Portes_Etage ]-> q2 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ eAppel_Montee_Cabine ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ gAppel_Montee_Etage ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ hAppel_Descente_Etage ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q2 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ bOuverture_Portes_Cabine ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q2 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ eAppel_Montee_Cabine ]-> q2 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q2 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ gAppel_Montee_Etage ]-> q2 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q2 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ hAppel_Descente_Etage ]-> q2 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])


SET_RCHD_EXPECTED_AT: 



SET_UNRCHD_AS: 
q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])
q6 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])


SET_UNRCHD_EXPECTED_AS: 
q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])
q6 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])


SET_UNRCHD_AT: 
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ aOuverture_Portes_Etage ]-> q6 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ cFermeture_Portes_Cabine ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ dFermeture_Portes_Etage ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ dFermeture_Portes_Etage ]-> q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ eAppel_Montee_Cabine ]-> q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ fAppel_Descente_Cabine ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ gAppel_Montee_Etage ]-> q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ jChangement_Direction ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ jChangement_Direction ]-> q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ kDescente_Cabine ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ eAppel_Montee_Cabine ]-> q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ fAppel_Descente_Cabine ]-> q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ gAppel_Montee_Etage ]-> q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ hAppel_Descente_Etage ]-> q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ iMontee_Cabine ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q2 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ fAppel_Descente_Cabine ]-> q2 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0]) -[ cFermeture_Portes_Cabine ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0]) -[ dFermeture_Portes_Etage ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0]) -[ fAppel_Descente_Cabine ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0]) -[ gAppel_Montee_Etage ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])
q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0]) -[ hAppel_Descente_Etage ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])
q6 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0]) -[ bOuverture_Portes_Cabine ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])
q6 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0]) -[ fAppel_Descente_Cabine ]-> q6 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])
q6 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0]) -[ gAppel_Montee_Etage ]-> q6 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])
q6 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0]) -[ hAppel_Descente_Etage ]-> q6 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])


SET_UNRCHD_EXPECTED_AT: 
q1 = (Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0]) -[ iMontee_Cabine ]-> q0 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), ¬(p0 = PE(3)=ouvertes[0])
q6 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), (Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0]) -[ bOuverture_Portes_Cabine ]-> q4 = ¬(Montee_Cabine = and(Pos < LF, Pos >= 0, PC=refermees[2], PE(Pos)=fermees[1], Dir=1, or(∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BM(etage)=1)), ∃(etage).(and(and(etage ∈ [(Pos + 1)..LF], ), , BC(etage)=1))))), ¬(Ouverture_Portes_Cabine = and(PE(Pos)=ouvertes[0], PC=fermees[1])), (p0 = PE(3)=ouvertes[0])


TIME_ATS: 00:00:04.716

TIME_TESTS: 00:00:00.000