<?xml version="1.0"?>

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="rel"
           xmlns="rel"
           elementFormDefault="qualified">

    <xs:simpleType name="name">
        <xs:restriction base="xs:string">
            <xs:pattern value="[0-9a-zA-Z_]+"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="state-name">
        <xs:restriction base="xs:string">
            <xs:pattern value="q[0-9]+"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="identifier">
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z][a-zA-Z0-9]*"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- SCHEMA **************************************************** -->
    <xs:element name="relevance">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="relevance-predicate"/>
                <xs:element ref="expected-states"/>
                <xs:element ref="expected-transitions"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <!-- *********************************************************** -->

    <!-- ROOTS **************************************************** -->
    <xs:element name="relevance-predicate">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="atomic-predicate" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="expected-states">
        <xs:complexType>
            <xs:choice>
                <xs:element ref="all-states"/>
                <xs:element ref="state" maxOccurs="unbounded"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <xs:element name="expected-transitions">
        <xs:complexType>
            <xs:choice>
                <xs:element ref="all-transitions"/>
                <xs:element ref="transition" maxOccurs="unbounded"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    <!-- ********************************************************** -->

    <!-- EXPECTED ************************************************* -->
    <xs:element name="all-states"/>
    <xs:element name="state">
        <xs:complexType>
            <xs:attribute name="name" type="state-name" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="all-transitions"/>
    <xs:element name="transition">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="state"/>
                <xs:element ref="event"/>
                <xs:element ref="state"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="event">
        <xs:complexType>
            <xs:attribute name="name" type="name" use="required"/>
        </xs:complexType>
    </xs:element>
    <!-- ********************************************************** -->

    <!-- ATOMIC **************************************************** -->
    <xs:element name="atomic-predicate" abstract="true"/>
    <xs:element name="var-changes" substitutionGroup="atomic-predicate">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="var"/>
                <xs:element ref="arith-expr"/>
                <xs:element ref="arith-expr"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="fun-changes" substitutionGroup="atomic-predicate">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="fun"/>
                <xs:element ref="arith-expr"/>
                <xs:element ref="arith-expr"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="var-decreases" substitutionGroup="atomic-predicate">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="var"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="var-increases" substitutionGroup="atomic-predicate">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="var"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="fun-decreases" substitutionGroup="atomic-predicate">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="fun"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="fun-increases" substitutionGroup="atomic-predicate">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="fun"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="conditions" substitutionGroup="atomic-predicate">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="condition" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="condition">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="bool-expr"/>
                <xs:element ref="atomic-predicate"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <!-- *********************************************************** -->

    <!-- SET ******************************************************* -->
    <xs:element name="set-expr" abstract="true"/>
    <xs:element name="set-expr-non-named" abstract="true" substitutionGroup="set-expr"/>
    <xs:element name="named-set" substitutionGroup="set-expr">
        <xs:complexType>
            <xs:attribute name="name" type="identifier" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="set" substitutionGroup="set-expr-non-named">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="arith-expr-non-enum" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="enum" substitutionGroup="set-expr-non-named">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="enum-value" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="range" substitutionGroup="set-expr-non-named">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="arith-expr-non-enum"/>
                <xs:element ref="arith-expr-non-enum"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <!-- *********************************************************** -->

    <!-- ARITH ***************************************************** -->
    <xs:element name="arith-expr" abstract="true"/>
    <xs:element name="arith-expr-non-enum" abstract="true" substitutionGroup="arith-expr"/>
    <xs:element name="assignable" abstract="true" substitutionGroup="arith-expr-non-enum"/>
    <xs:element name="enum-value" substitutionGroup="arith-expr">
        <xs:complexType>
            <xs:attribute name="name" type="identifier" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="int" substitutionGroup="arith-expr-non-enum">
        <xs:complexType>
            <xs:attribute name="value" type="xs:integer" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="const" substitutionGroup="arith-expr-non-enum">
        <xs:complexType>
            <xs:attribute name="name" type="identifier" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="var" substitutionGroup="assignable">
        <xs:complexType>
            <xs:attribute name="name" type="identifier" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="fun" substitutionGroup="assignable">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="arith-expr"/>
            </xs:sequence>
            <xs:attribute name="name" type="identifier" use="required"/>
        </xs:complexType>
    </xs:element>
    <xs:element name="plus" substitutionGroup="arith-expr-non-enum">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="arith-expr" minOccurs="2" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="minus" substitutionGroup="arith-expr-non-enum">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="arith-expr" minOccurs="2" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="times" substitutionGroup="arith-expr-non-enum">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="arith-expr" minOccurs="2" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="div" substitutionGroup="arith-expr-non-enum">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="arith-expr" minOccurs="2" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <!-- *********************************************************** -->

    <!-- BOOL ****************************************************** -->
    <xs:element name="bool-expr" abstract="true"/>
    <xs:element name="false" substitutionGroup="bool-expr" fixed=""/>
    <xs:element name="true" substitutionGroup="bool-expr" fixed=""/>
    <xs:element name="not" substitutionGroup="bool-expr">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="bool-expr"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="and" substitutionGroup="bool-expr">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="bool-expr" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="or" substitutionGroup="bool-expr">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="bool-expr" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="equals" substitutionGroup="bool-expr">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="arith-expr" minOccurs="2" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="neq" substitutionGroup="bool-expr">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="arith-expr"/>
                <xs:element ref="arith-expr"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="lt" substitutionGroup="bool-expr">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="arith-expr"/>
                <xs:element ref="arith-expr"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="leq" substitutionGroup="bool-expr">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="arith-expr"/>
                <xs:element ref="arith-expr"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="gt" substitutionGroup="bool-expr">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="arith-expr"/>
                <xs:element ref="arith-expr"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="geq" substitutionGroup="bool-expr">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="arith-expr"/>
                <xs:element ref="arith-expr"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="implies" substitutionGroup="bool-expr">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="bool-expr"/>
                <xs:element ref="bool-expr"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="equiv" substitutionGroup="bool-expr">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="bool-expr"/>
                <xs:element ref="bool-expr"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="bool-ite" substitutionGroup="bool-expr">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="bool-expr"/>
                <xs:element ref="bool-expr"/>
                <xs:element ref="bool-expr"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="forall" substitutionGroup="bool-expr">
        <xs:complexType>
            <xs:all>
                <xs:element ref="vars-defs"/>
                <xs:element ref="bool-expr"/>
            </xs:all>
        </xs:complexType>
    </xs:element>
    <xs:element name="exists" substitutionGroup="bool-expr">
        <xs:complexType>
            <xs:all>
                <xs:element ref="vars-defs"/>
                <xs:element ref="bool-expr"/>
            </xs:all>
        </xs:complexType>
    </xs:element>

    <xs:element name="vars-defs">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="var-def" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:element name="var-def">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="set-expr"/>
            </xs:sequence>
            <xs:attribute name="name" type="identifier" use="required"/>
        </xs:complexType>
    </xs:element>

    <!-- *********************************************************** -->

</xs:schema>
